#!/bin/sh

# NOTE: assert_output uses multiple lines to avoid subshell last newline
# 	trimming

echo "$TS_DIFF"


sn="$(dirname "$(dirname "$0")")/sn"

setup() {
	mkdir -p "$ts_test_dir"
	export SN_DATA="$ts_test_dir"
}

teardown() {
	rm -r "$ts_test_dir"
}

error() {
	echo "Error: $1"
	exit 1
}

test_no_command_shows_usage() {
	$sn | assert_output "\
$($sn --help)
"
}

test_invalid_command() {
	$sn invalid-command
	assert_status 1 $?
}

#############
# sn create #
#############

test_create() {
	network="test-network"
	$sn -n "$network" create
	assert_status 0 $?
	[ -d "$SN_DATA/$network/.git" ] || error "Git repository not initialized"
}

test_create_too_many_parameters() {
	$sn create test network
	assert_status 1 $?
}

test_create_default_username_in_config() {
	test_create
	assert_status 0 $?
	assert_output "\
test-network_username=$USER
" < "$SN_DATA/config"
}

###########
# sn post #
###########

test_post() {
	test_create
	message="post this is a very long message in the same line"
	$sn -n "$network" post "$message"
	assert_status 0 $?
	grep "\[.*\]$message" "$SN_DATA/$network/$USER"
	assert_status 0 $?
	cd "$SN_DATA/$network" || exit 1
	git log | grep -q "$message"
	assert_status 0 $?
}

test_post_empty_message() {
	test_create
	# To avoid hanging stdout and stdin must be redirected to /dev/null
	"$sn" post >/dev/null 2>&1 &
	# It's not enough to run 'sn post' because then, an editor is shown to the
	# user for entering the message. We use the pid of the sn command, in order
	# to kill the vim process that will be run.
	# We have to sleep in order to give the vim process time to start.
	sleep 1
	kill -9 "$(ps -Af | awk "{if (\$3 == $!) print \$2}")"
	assert_status 0 $?
	cat -n "$SN_DATA/$network/$USER" 2>/dev/null | assert_output ""
}

test_post_default_network() {
	test_create
	message="post this is a very long message in the same line"
	$sn post "$message" | grep "$network"
	assert_status 0 $?
	grep "\[.*\]$message" "$SN_DATA/$network/$USER"
	assert_status 0 $?
}

export TS_COLOR="true"

. tests/ts
