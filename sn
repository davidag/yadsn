#!/bin/sh

set -eu

. lib/globals.sh
. lib/file-format.sh

CMDNAME=${0##*/}

main() {
	command -v git >/dev/null 2>&1 \
		|| die "Git must be installed to use this program"

	# shellcheck disable=2015
	[ $# -ge 1 ] && [ "$1" != "--help" ] || usage

	[ -d "${SN_DATA:=$HOME/.sn}" ] || mkdir -p "${SN_DATA}" \
		|| die "Creating sn data directory"

	network=
	username=
	while getopts n:u:h option ; do
		case $option in
			n) network="$OPTARG" ;;
			u) username="$OPTARG" ;;
			h) usage ;;
			?) usage ;;
		esac
	done
	shift $((OPTIND - 1))

	[ $# -ge 1 ] || usage

	network="${network:=$(get_default_network)}"
	username="${username:=$(get_config "$network" username)}"

	if [ -n "$network" ]; then
		cd "$(network_dir "$network")" \
			|| die "Unable to change into network directory"
	fi

	cmd=$1
	shift

	trap clean EXIT INT

	case $cmd in
		create)
			[ -n "${1:-}" ] || die "Missing name of new network"
			[ "$#" -eq 1 ] || die "Too many arguments"
			network="$1"
			username="${username:-$USER}"
			cmd_create
		;;

		join)
			[ -n "${1:-}" ] || die "Missing required Git URL"
			[ "$#" -gt 2 ] && die "Too many arguments"
			network_url="$1"
			network="${2:-$(extract_network_from_url "$network_url")}"
			username="${username:-$USER}"
			cmd_join
		;;

		post)
			[ -n "$network" ] || die "No default network defined in config"
			[ -n "$username" ]|| die "Unknown username to use in '$network'"
			cmd_post "$@"
		;;

		log|members)
			[ -n "$network" ] || die "No default network defined in config"
			"cmd_$cmd" "$@"
		;;

		show|like)
			[ -n "$network" ] || die "No default network defined in config"
			user_msg_id="${1:-}"
			[ -n "$user_msg_id" ] \
				|| { die "No message id provided" ; }
			"cmd_$cmd" "$@"
		;;

		*)
			die "Invalid command"
		;;
	esac
}

usage() {
	cat <<EOF
Usage: $CMDNAME [global-options] <command>

Global options

	-n network-name: If not provided, and there is only one network in the
		data directory, this is automatically selected. If there is more than
		one, the variable 'default_network' from the config file is used.

	-u username: The username to use when executing the command. If none is
		provided, the variable '<network-name>_username' from the config file is
		used (see -n for how <network-name> is selected).

Commands

	create <network-name>
		Create a new local network. -n does not apply, but -u can be used to
		define what username to use by default in that network.

	join <git-url> [<network-name>]
		Joins a remote network identified by a Git URL. If <network-name> is
		provided, it will be usually to identify the network locally.
		Otherwise, the network name is deduced from the URL.

	members
		Shows a list of users in the network.

	log
		Show posts, most recent first. Only the first line of each message is
		shown, with an ellipsis representing messages with more than one line.

	post [<message>]
		Post a message in a network. No quotation necessary. If no text is
		provided the default editor is used to input the message.

	show <message-id>
		Shows a message along all its associated information. The message id
		can be obtained with the 'log' command.

	like <message-id>
		Like a message. The message id can be obtained with the 'log' command.
EOF
	exit 1
}

die() {
	echo "Error: $1" >&2
	[ "${2:-}" = 'no' ] || echo "Try '$CMDNAME --help' for more information." >&2
	exit 1
}

clean() {
	[ -e "${tmpfile:-}" ] && rm -f "$tmpfile" >/dev/null 2>&1
}

extract_network_from_url() {
	# remove all until the first / (included) and the .git suffix (if present)
	echo "${1##*/}" | sed 's/\.git$//'
}

get_config() {
	network=$1
	variable=$2
	[ -f "$(config_file)" ] || { echo "" ; return ; }
	awk -F= "/^${network}_${variable}/ { print \$2 }" "$(config_file)"
}

# pre: working directory is a valid network with a git repository
get_users() {
	find . -type d ! -path '*.git*' \
				-a ! -path "./*/*" \
	| sed -nE 's/\.\/(.+)/\1/p'
}

get_networks() {
	find "$(data_dir)" -type d ! -path '*.git*' \
		-a ! -path "$(data_dir)"\
		-a ! -path "$(data_dir)/*/*"
}

get_default_network() {
	# we don't use -maxdepth because it's not POSIX standard
	networks=$(get_networks)
	if [ "$(echo "$networks" | wc -l)" = "1" ]; then
		echo "${networks##*/}"
	else
		default_network=$(get_config default network)
		echo "$default_network"
	fi
}

get_editor() {
	for editor in "${VISUAL:-}" "${EDITOR:-}" ; do
		if command -v "$editor" >/dev/null 2>&1 ; then
			echo "$editor"
			return
		fi
	done
	echo "vi"
}

get_likes() {
	find . -type f \( ! -path '*.git*' \
		-a -name "$(likes_file)" \) -print0 \
		| xargs -0 grep "^\"$1" \
		| wc -l
}

git_commit() {
	commit_msg=$1
	commit_date=${SN_TEST_NOW:-}
	[ -n "$commit_date" ] && commit_date="--date $commit_date"
	# shellcheck disable=2086
	git commit -m "$commit_msg" $commit_date >/dev/null
}

# pre: working directory is a valid network with a git repository
# pre: $username contains the user name to use
add_user() {
	mkdir "$username" || die "Creating user directory"
	create_file "$username/$(posts_file)"
	git add "$username" >/dev/null
	git_commit "User '$username' joined"
}

# pre: working directory is a valid network with a git repository
add_message() {
	file=$1
	shift
	append_file "$username/$file" "$@"
	git add "$username" >/dev/null
	git_commit "User '$username' added ${file##*/}"
}

cmd_create() {
	[ -d "$(network_dir "$network")" ] \
		&& die "A network named '$network' already exists"
	mkdir -p "$(network_dir "$network")" || die "Creating network directory"
	cd "$(network_dir "$network")" \
		|| die "Unable to change into network directory"
	git init > /dev/null
	add_user
	echo "${network}_username=$username" >> "$(config_file)"
	echo "Created network '$network'. Joined as '$username'."
}

cmd_join() {
	[ -d "$(network_dir "$network")" ] \
		&& die "A network named '$network' already exists"
	git clone "$network_url" "$(network_dir "$network")" >/dev/null \
		|| die "Cloning remote Git repository"
	cd "$(network_dir "$network")" \
		|| die "Unable to change into network directory"
	add_user
	echo "Joined network '$network' as user '$username'."
}

cmd_members() {
	get_users
}

cmd_post() {
	message="$*"
	if [ -z "$message" ]; then
		umask 077
		tmpfile=$(mktemp)
		[ -n "$tmpfile" ] && $(get_editor) "$tmpfile"
		message=$(cat "$tmpfile")
		rm -f "$tmpfile"
	fi
	[ -n "$message" ] || die "Can't post empty message"
	[ -d "$username" ] || add_user
	add_message "$(posts_file)" "$message"
	echo "Posted message to '$network' with user '$username'"
}

format_log() {
	while read -r line ; do
		msg_id="$(echo "$line" | cut -f3)"
		printf "[%s | #%s | ❤️%s] @%s: %s\n" \
			"$(echo "$line" | cut -f1 | sed 's/.*/@&/' | xargs -n1 date +'%x %R' -d)" \
			"$(echo "$line" | cut -f3)" \
			"$(get_likes "$msg_id")" \
			"$(echo "$line" | cut -f2)" \
			"$(echo "$line" | cut -f4-)"
	done
}

cmd_log() {
	# using git blame allows to show always the latest version of a post, and
	# don't show deleted posts. This would be really complex and inefficient
	# using git log.
	for user in $(get_users) ; do
		# '--date unix' prints unix time in UTC
		entry=$(git blame --date unix "$user/$(posts_file)" \
			| sed -E 's/^([0-9a-z]+) \(.* ([0-9]+) [0-9 ]+\) "(.*)"$/\2\t'"$user"'\t\1\t\3/')
		entry=$(shorten_text "$entry")
		printf "%s\n" "$entry"
	# sort by unix time, and then format the output
	done | sort -rn | format_log
}

get_message_data() {
	# trick: use '|| true' to avoid exiting if error due to 'set -e'
	msg_out="$(git show --date unix "$user_msg_id" 2>/dev/null || true)"
	[ -n "$msg_out" ] || die "Invalid message id"
	# get full SHA-1 hash from the one the user provided
	msg_full_id="$(git rev-parse "$user_msg_id")"
	msg_short_id="$(git rev-parse --short "$user_msg_id")"
	msg_date="$(echo "$msg_out" | \
		sed -nE 's/^Date:\s+([0-9]+)/\1/p')"
	msg_user="$(echo "$msg_out" | \
		sed -nE 's/^diff.*\/(.+)\/'"$(posts_file)"'$/\1/p')"
	msg_text=$(echo "$msg_out" | sed -nE 's/^\+"(.*)"$/\1/p')
}

cmd_show() {
	# trick: don't use $() to be able to access function msg_* variables here
	get_message_data >/dev/null
	printf "[%s | %s] by @%s (❤️%s)\n\n" \
		"$(date +'%x %R' -d @"$msg_date")" \
		"#$msg_short_id" \
		"$msg_user" \
		"$(get_likes "$msg_full_id")"
	printf "%s\n" "$(import_text "$msg_text")"
}

cmd_like() {
	get_message_data >/dev/null
	grep -q "$msg_full_id" "$username/$(likes_file)" 2>/dev/null \
		&& die "You already liked this message!" "no"
	add_message "$(likes_file)" "$msg_full_id"
	echo "Liked message from '$msg_user' in network '$network'"
}

main "$@"
