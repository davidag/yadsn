#!/bin/sh

set -eu

. ./lib/file-format.sh

main() {
	command -v git >/dev/null 2>&1 \
		|| die "Git must be installed to use this program."

	[ $# -ge 1 ] || usage

	[ -d "${SN_DATA:=$HOME/.sn}" ] || mkdir -p "${SN_DATA}" \
		|| die "Creating sn data directory"

	network=
	username=
	while getopts n:u:h option ; do
		case $option in
			n) network="$OPTARG" ;;
			u) username="$OPTARG" ;;
			h) usage ;;
			?) usage ;;
		esac
	done
	shift $((OPTIND - 1))

	[ $# -ge 1 ] || usage

	cmd=$1
	shift

	trap clean EXIT INT

	case $cmd in
		create)
			[ -n "$network" ] || die "Network option must be provided" true
			username=${user:-$USER}
			cmd_create
		;;

		post)
			[ -n "${network:=$(get_default_network)}" ] \
				|| die "No default network defined in config"
			[ -n "${username:=$(get_config "$network" username)}" ] \
				|| die "Invalid username for network '$network' in '$(config_file)'"
			cd "$(network_dir "$network")" \
				|| die "Unable to change into network directory"
			cmd_post "$@"
		;;

		log|members)
			[ -n "${network:=$(get_default_network)}" ] \
				|| die "No default network defined in config"
			cd "$(network_dir "$network")" \
				|| die "Unable to change into network directory"
			"cmd_$cmd" "$@"
		;;

		*)
			die "Invalid command"
		;;
	esac
}

usage() {
	cat <<EOF
Usage: ${0##*/} [-n network-name] <command>
EOF
	exit 1
}

die() {
	echo "Error: $1" >&2
	[ -n "${2:-}" ] && usage
	exit 1
}

clean() {
	[ -e "${tmpfile:-}" ] && rm -f "$tmpfile" >/dev/null 2>&1
}

config_file() {
	echo "${SN_DATA}/config"
}

posts_file() {
	echo post
}

network_dir() {
	echo "${SN_DATA}/$1"
}

get_config() {
	network=$1
	variable=$2
	awk -F= "/^${network}_${variable}/ { print \$2 }" "$(config_file)"
}

# pre: working directory is a valid network with a git repository
get_users() {
	find . -type d ! -path '*.git*' \
				-a ! -path "./*/*" \
	| sed -nE 's/\.\/(.+)/\1/p'
}

get_networks() {
	find "$SN_DATA" -type d ! -path '*.git*' \
						-a ! -path "$SN_DATA"\
						-a ! -path "$SN_DATA/*/*"
}

get_default_network() {
	# we don't use -maxdepth because it's not POSIX standard
	networks=$(get_networks)
	if [ "$(echo "$networks" | wc -l)" = "1" ]; then
		echo "${networks##*/}"
	else
		default_network=$(get_config default network)
		echo "$default_network"
	fi
}

get_editor() {
	for editor in "${VISUAL:-}" "${EDITOR:-}" ; do
		if command -v "$editor" >/dev/null 2>&1 ; then
			echo "$editor"
			return
		fi
	done
	echo "vi"
}

git_commit() {
	commit_msg=$1
	commit_date=${SN_TEST_NOW:-}
	[ -n "$commit_date" ] && commit_date="--date $commit_date"
	# shellcheck disable=2086
	git commit -m "$commit_msg" $commit_date >/dev/null
}

# pre: working directory is a valid network with a git repository
# pre: $username contains the user name to use
add_user() {
	mkdir "$username" || die "Creating user directory"
	create_file "$username/$(posts_file)"
	git add "$username" >/dev/null
	git_commit "User '$username' joined"
}

# pre: working directory is a valid network with a git repository
add_message() {
	file=$1
	shift
	append_file "$username/$file" "$@"
	git add "$username" >/dev/null
	git_commit "User '$username' added ${file##*/}"
}

cmd_create() {
	mkdir -p "$(network_dir "$network")" || die "Creating network directory"
	cd "$(network_dir "$network")" \
		|| die "Unable to change into network directory"
	git init > /dev/null
	add_user
	echo "${network}_username=$username" >> "$(config_file)"
	echo "Created network '$network'. Joined as '$USER'."
}

cmd_members() {
	get_users
}

cmd_post() {
	message="$*"
	if [ -z "$message" ]; then
		umask 077
		tmpfile=$(mktemp)
		[ -n "$tmpfile" ] && $(get_editor) "$tmpfile"
		message=$(cat "$tmpfile")
		rm -f "$tmpfile"
	fi
	[ -n "$message" ] || die "Can't post empty message"
	[ -d "$username" ] || add_user
	add_message "$(posts_file)" "$message"
	echo "Posted message to '$network' with user '$username'"
}

format_log() {
	while read -r line ; do
		printf "[%s | #%s] @%s: %s\n" \
			"$(echo "$line" | cut -f1 | sed -E 's/(.*)/@\1/' | xargs -n1 date +'%x %R' -d)" \
			"$(echo "$line" | cut -f3)" \
			"$(echo "$line" | cut -f2)" \
			"$(echo "$line" | cut -f4-)"
	done
}

cmd_log() {
	for user in $(get_users) ; do
		# '--date unix' prints unix time in UTC
		entry=$(git blame --date unix "$user/$(posts_file)" \
			| sed -E 's/^([0-9a-z]+) \(.* ([0-9]+) [0-9 ]+\) "(.*)"$/\2\t'"$user"'\t\1\t\3/')
		# Show only the first line in the messsage
		entry=$(echo "$entry" | sed 's/<NEWLINE>.*$/.../')
		# Transform tabs
		entry=$(import_text "$entry")
		printf "%s\n" "$entry"
	# sort by unix time, and then format the output
	done | sort -rn | format_log
}

main "$@"
